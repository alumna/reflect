"use strict";var fs=require("fs"),util=require("util");const copy=util.promisify(fs.copyFile),mkdir=util.promisify(fs.mkdir),readdir=util.promisify(fs.readdir),rmdir=util.promisify(fs.rmdir),stat=util.promisify(fs.stat),unlink=util.promisify(fs.unlink),utimes=util.promisify(fs.utimes);class Reflect{constructor(i=!0,e=!0,t=[]){this.cache={},this.exclude={},this.recursive=i,this.delete=e,t.forEach(i=>this.exclude[i]=!0)}async start(i,e){return i&&e?"string"!=typeof i||"string"!=typeof e?{res:!1,err:"Parameters 'src' and 'dest' must be string paths"}:(i=this.fix(i),e=this.fix(e),await this.prepare(i,"src")&&await this.prepare(e,"dest")?(await this.walk(i,e),{res:'Directory "'+i+'" reflected to "'+e+'"',err:!1}):{res:!1,err:"Parameters 'src' and 'dest' must be a directory"}):{res:!1,err:"Parameters 'src' and 'dest' must be defined"}}async prepare(i,e){return!!await this.is_dir(i)||!await this.read(i)&&("src"!=e&&(this.cache[i]=!0,await mkdir(i),!0))}async walk(i,e){const t=[],r=await readdir(i),s=await readdir(e);if(this.delete&&s.length){const i={};r.forEach(e=>i[e]=!0),s.filter(t=>!i[t]&&!this.exclude[e+"/"+t]).forEach(i=>t.push(this.remove(e+"/"+i)))}return r.forEach(r=>t.push(this.sync(i+"/"+r,e+"/"+r))),Promise.all(t)}async sync(i,e){return!!this.exclude[i]||(this.recursive&&await this.is_dir(i)?(await this.prepare(e,"dest"),this.walk(i,e)):!(!await this.read(e)||this.is_different(i,e))||(await copy(i,e),utimes(e,this.cache[i].atime,this.cache[i].mtime)))}async read(i){if(void 0===this.cache[i])try{return this.cache[i]=await stat(i)}catch(e){return this.cache[i]=!1,!1}return this.cache[i]}async remove(i){if(!await this.is_dir(i))return this.cache[i]=!1,unlink(i);const e=await readdir(i);return await Promise.all(e.map(e=>this.remove(i+"/"+e))),this.cache[i]=!1,rmdir(i)}async is_dir(i){return!!await this.read(i)&&this.cache[i].isDirectory()}is_different(i,e){return this.cache[i].size!=this.cache[e].size||this.cache[i].mtime!=this.cache[e].mtime}fix(i){const e=i.slice(-1);return"/"==e||"\\"==e?i.slice(0,-1):i}}function index({src:i,dest:e,recursive:t=!0,delete:r=!0,exclude:s=[]}){return new Reflect(t,r,s).start(i,e)}module.exports=index;
