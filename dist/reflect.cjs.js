"use strict";var fs=require("fs"),util=require("util");const copy=util.promisify(fs.copyFile),mkdir=util.promisify(fs.mkdir),readdir=util.promisify(fs.readdir),rmdir=util.promisify(fs.rmdir),stat=util.promisify(fs.stat),unlink=util.promisify(fs.unlink),utimes=util.promisify(fs.utimes);class Reflect{constructor(e,i){this.cache={},this.exclude={},this.recursive=e,this.delete=i}async start(e,i,t){return e&&i?"string"!=typeof e||"string"!=typeof i?{res:!1,err:"Parameters 'src' and 'dest' must be string paths"}:(e=this.fix(e),i=this.fix(i),await this.prepare(e,"src")&&await this.prepare(i,"dest")?(t.forEach(i=>this.exclude[e+"/"+i]=!0),await this.walk(e,i),{res:'Directory "'+e+'" reflected to "'+i+'"',err:!1}):{res:!1,err:"Parameters 'src' and 'dest' must be a directory"}):{res:!1,err:"Parameters 'src' and 'dest' must be defined"}}async prepare(e,i){return!!await this.is_dir(e)||!await this.read(e)&&("src"!=i&&(this.cache[e]=!0,await mkdir(e),!0))}async walk(e,i){const t=[],r=await readdir(e),s=await readdir(i);if(this.delete&&s.length){const e={};r.forEach(i=>e[i]=!0),s.filter(t=>!e[t]&&!this.exclude[i+"/"+t]).forEach(e=>t.push(this.remove(i+"/"+e)))}return r.forEach(r=>t.push(this.sync(e+"/"+r,i+"/"+r))),Promise.all(t)}async sync(e,i){return!!this.exclude[e]||(await this.is_dir(e)?!this.recursive||(await this.prepare(i,"dest"),this.walk(e,i)):!(!await this.read(i)||this.is_different(e,i))||(await copy(e,i),utimes(i,this.cache[e].atime,this.cache[e].mtime)))}async read(e){if(void 0===this.cache[e])try{return this.cache[e]=await stat(e)}catch(i){return this.cache[e]=!1,!1}return this.cache[e]}async remove(e){if(!await this.is_dir(e))return this.cache[e]=!1,unlink(e);const i=await readdir(e);return await Promise.all(i.map(i=>this.remove(e+"/"+i))),this.cache[e]=!1,rmdir(e)}async is_dir(e){return!!await this.read(e)&&this.cache[e].isDirectory()}is_different(e,i){return this.cache[e].size!=this.cache[i].size||this.cache[e].mtime.getTime()!=this.cache[i].mtime.getTime()}fix(e){const i=e.slice(-1);return"/"==i||"\\"==i?e.slice(0,-1):e}}function index({src:e,dest:i,recursive:t=!0,delete:r=!0,exclude:s=[]}){return new Reflect(t,r).start(e,i,s)}module.exports=index;
